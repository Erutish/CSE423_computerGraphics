# -*- coding: utf-8 -*-
"""Lab02_Task01_21201513.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uiVNNUXFicg70ONnKfH4W2nmH-pHKsoN
"""

from OpenGL.GL import *
from OpenGL.GLU import *
from OpenGL.GLUT import *
import random

current_mode = 0
play_button_visible = True

WINDOW_WIDTH, WINDOW_HEIGHT =500,500
catcher_x = 150
catcher_y = 10
catcher_width = 90
catcher_height = 20
catcher_speed = 10

diamonds = []
diamond_speed = 0.5  #initial speed
diamond_spawn_rate = 1
max_diamond_speed = 100

score = 0
game_over = False

def draw_catcher():

    if game_over:  # setting condition for a red catcher when its game over
        glColor3f(1.0,0.0,0.0)
    else:
        glColor3f(1.0, 1.0, 1.0)


    draw_line(catcher_x + 10, catcher_y,catcher_x + catcher_width - 10, catcher_y)
    draw_line(catcher_x+10  , catcher_y,catcher_x, catcher_y + catcher_height)
    draw_line(catcher_x + catcher_width - 10, catcher_y,catcher_x + catcher_width, catcher_y + catcher_height)
    draw_line(catcher_x , catcher_y + catcher_height,catcher_x+ catcher_width, catcher_y + catcher_height)





def draw_diamond(x, y, size,color):

    glColor3f(*color)

    draw_line(x, y + size / 2,x + size / 2, y + size)

    draw_line(x + size / 2, y,x, y + size / 2)

    draw_line(x + size, y + size / 2,x + size / 2, y)

    draw_line(x + size / 2, y + size,x + size, y + size / 2)



def update_objects():
    global score, game_over, catcher_x, catcher_y, catcher_width, catcher_height, diamond_speed



    if not game_over and current_mode == 0  :

        for diamond in diamonds:

            diamond['y'] -= diamond_speed


            if catcher_collides_with_diamond(catcher_x, catcher_y, catcher_width, catcher_height, diamond):
                diamonds.remove(diamond)

                score += 1
                diamond_speed = min(diamond_speed+0.5,max_diamond_speed)# Increase falling speed with a cap
                print("Score: ",score)

                # print("One iteration of score increment ")
                # print("if condition passed successfully at update_object ")
                # print("upadted diamond speed ",diamond_speed)




        if any(diamond['y'] <= 0 for diamond in diamonds):
            # print("GAME OVER CONDITION PASSED SUCCESSFULLY ")
            print("Game Over! Score:",score )

            game_over = True


            catcher_speed = 0
            draw_catcher() #this would again call the draw catcher function to present red box when game is over





def catcher_collides_with_diamond(cx, cy, cw, ch, diamond):
    return (    cx < diamond['x'] + diamond['size']
            and cy < diamond['y'] + diamond['size']
            and cx + cw > diamond['x']
            and cy + ch > diamond['y']
           )

def show_screen():

    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)
    if not game_over :
            for diamond in diamonds:
                     draw_diamond(diamond['x'], diamond['y'], diamond['size'],diamond['color'])


    draw_catcher()

    if not diamonds:
        new_diamond = {'x': random.randint(0, WINDOW_WIDTH - 10), 'y': WINDOW_HEIGHT, 'size': 20,
                       'color': (random.random(), random.random(), random.random())}
        diamonds.append(new_diamond)
        catcher_x = WINDOW_WIDTH // 2 - catcher_width // 2


    cross_button()
    back_button()
    if play_button_visible:

        # print("PLAY BUTTON SHOULD BE VISIBLE ")
        play_button()

    else:

        # print("PAUSE BUTTON SHOULD BE VISIBLE ")
        pause_button()

    glutSwapBuffers()

def back_button():
    glColor3f(0.0, 1.0, 1.0)
    bx1 = int(16)  # minimum x value
    bx2 = int(56)  # max x value
    bx_mid = int(bx1 + (bx2 - bx1) / 2)
    by1 = int(440)  # y min
    by2 = int(480)  # y max
    by_mid = int(by1 + (by2 - by1) / 2)
    draw_line(bx1, by_mid, bx_mid, by2)
    draw_line(bx1, by_mid, bx2, by_mid)
    draw_line(bx1, by_mid, bx_mid, by1)


def play_button():
    global play_button_visible
    play_button_visible = True
    glColor3f(1.0, 1.0, 0.0)
    px1 = int(230)  # minimum x value
    px2 = int(270)  # max x value

    py1 = int(440)  # y min
    py2 = int(480)  # y max
    py_mid = int(py1 + (py2 - py1) / 2)
    draw_line(px1, py2, px2, py_mid)
    draw_line(px1, py1, px1 - 0.0000001, py2)
    draw_line(px1, py1, px2, py_mid)

def pause_button():
    global play_button_visible
    play_button_visible = False

    glColor3f(1.0, 1.0, 0.0)
    tx1 = int(230)  # minimum x value
    tx2 = int(270)  # max x value
    ty1 = int(440)  # y min
    ty2 = int(480)  # y max

    t_part = int((tx2 - tx1) / 3)

    # print("PAUSED")
    draw_line(tx1 + t_part - 0.001, ty1, tx1 + t_part, ty2)
    draw_line(tx1 + 2 * t_part - 0.0001, ty1, tx1 + 2 * t_part, ty2)


def cross_button():
    glColor3f(1.0, 0.0, 0.0)
    cx1 = int(420)  # minimum x value
    cx2 = int(460)  # max x value
    cx_mid = int(cx1 + (cx2 - cx1) / 2)
    cy1 = int(440)  # y min
    cy2 = int(480)  # y max
    cy_mid = int(cy1 + (cy2 - cy1) / 2)
    draw_line(cx1, cy1, cx2, cy2)
    draw_line(cx1, cy2, cx2, cy1)


def mouse_click(button, state, x, y):
    if button == GLUT_LEFT_BUTTON and state == GLUT_DOWN:
        check_button_click(x, y)


def check_button_click(x, y):
    check_cross_button_click(x, y)
    check_back_button_click(x, y)
    check_play_button_click(x, y)



def check_back_button_click(x, y):
    bx1, bx2 = 16, 56
    by1, by2 = 440, 480
    if bx1 <= x <= bx2 and by1 <= WINDOW_HEIGHT - y <= by2:

        reset_game(show_message=True)


def toggle_play_pause_button():
    global play_button_visible, current_mode
    play_button_visible = not play_button_visible
    current_mode = 0 if play_button_visible else 1
    # print("Current_mode ",current_mode) #0 for play , 1 for pause
    if current_mode == 0:
      print("PLAYING")
    elif current_mode == 1:
      print("PAUSED")


def check_play_button_click(x, y):
    px1, px2 = int(230), int(270)
    py1, py2 = int(440), int(480)

    if px1 <= x <= px2 and py1 <= WINDOW_HEIGHT - y <= py2:
        # print("Play button clicked!")
        toggle_play_pause_button()
        glutPostRedisplay()


def check_cross_button_click(x, y):
    cx1, cx2 = 420, 4670
    cy1, cy2 = 440, 480
    if cx1 <= x <= cx2 and cy1 <= WINDOW_HEIGHT - y <= cy2:
        print("Goodbye! Score:",score)
        glutLeaveMainLoop()



def animation():
  # print("check current mode , play or pause "")
  if current_mode == 0:
        update_objects()
        glutPostRedisplay()


def keyboard_special_keys(key, _, __):

    global catcher_x
    global game_over,play_button_visible
    if  play_button_visible and  not game_over:
        if key == GLUT_KEY_LEFT  :
            catcher_x = max(0, catcher_x - catcher_speed)
        elif key == GLUT_KEY_RIGHT:
            catcher_x = min(WINDOW_WIDTH - catcher_width, catcher_x + catcher_speed)

    glutPostRedisplay()


def initialize():
    glViewport(0, 0, WINDOW_WIDTH, WINDOW_HEIGHT)
    glMatrixMode(GL_PROJECTION)
    glLoadIdentity()
    glOrtho(0.0, WINDOW_WIDTH, 0.0, WINDOW_HEIGHT, 0.0, 1.0)
    glMatrixMode(GL_MODELVIEW)
    glLoadIdentity()




def draw_line(x1,y1,x2,y2):
  # find the zone
  zone = find_zone(x1,y1,x2,y2)
  # convert the coordinate values to zone 0
  x1,y1 = convert_to_zone0(x1,y1,zone)
  x2,y2 = convert_to_zone0(x2,y2,zone)
  #mid point line with zone 0
  glBegin(GL_POINTS)
  midpoint_line(x1,y1,x2,y2,zone)
  glEnd()

def find_zone(x1,y1,x2,y2):
   dx = x2-x1
   dy = y2-y1
   if dx>dy:
     if dx>0 and dy>0 :
       zone = 0
     elif dx<0 and dy>0:
       zone = 3
     elif dx < 0 and dy < 0:
        zone = 4
     else:
        zone = 7

   else :
      if dx>0 and dy>0 :
        zone = 1
      elif dx<0 and dy>0 :
        zone =2
      elif dx < 0 and dy < 0:
        zone = 5
      else :
        zone = 6
   return zone

def convert_to_zone0(x, y, zone):
    if zone == 0:
        return x, y
    elif zone == 1:
        return y, x
    elif zone == 2:
        return y, -x
    elif zone == 3:
        return -x, y
    elif zone == 4:
        return -x, -y
    elif zone == 5:
        return -y, -x
    elif zone == 6:
        return -y, x
    elif zone == 7:
        return x,-y

def midpoint_line(x1,y1,x2,y2,zone):
  dx = x2 - x1
  dy = y2 - y1
  d = 2*dy-dx
  E = 2*dy
  NE = 2*(dy-dx)
  y=y1

  for x in range(int(x1), int(x2) + 1): # last iteration will be x2
    cx,cy = convert_to_original(x,y,zone)
    glVertex2f(cx,cy)
    if d>0:
      d+= NE
      y+= 1
    else :
      d+= E



def convert_to_original(x,y,zone):
    if zone == 0:
        return x, y
    elif zone == 1:
        return y, x
    elif zone == 2:
        return -y, x
    elif zone == 3:
        return -x, y
    elif zone == 4:
        return -x, -y
    elif zone == 5:
        return -y, -x
    elif zone == 6:
        return y, -x
    elif zone == 7:
        return x, -y

def reset_game(show_message=False):
    global diamonds, score, game_over, diamond_speed ,catcher_x
    diamonds = []
    score = 0
    game_over = False
    diamond_speed = 0.5  # Reset diamond speed
    catcher_x = 150  # Reset catcher position
    if show_message:
        print("Starting Over!!")

def main():

    glutInit()
    glutInitDisplayMode(GLUT_RGBA | GLUT_DOUBLE | GLUT_DEPTH)

    glutInitWindowSize(WINDOW_WIDTH, WINDOW_HEIGHT)
    glutInitWindowPosition(0, 0)
    wind = glutCreateWindow(b"OpenGL AABB Collision")

    glutDisplayFunc(show_screen)
    glutIdleFunc(animation)
    glutSpecialFunc(keyboard_special_keys)

    glEnable(GL_DEPTH_TEST)
    glutMouseFunc(mouse_click)
    initialize()
    reset_game()

    glutMainLoop()


if __name__ == "__main__":
    main()
